"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVLookupSignature = exports.isHeaderValid = exports.verifyMessage = exports.createAuthorizationHeader = exports.signMessage = exports.createSigningString = void 0;
var _sodium = require("libsodium-wrappers");
var createSigningString = function (_a) {
    var message = _a.message, created = _a.created, expires = _a.expires;
    return __awaiter(void 0, void 0, void 0, function () {
        var sodium, digest, digestBase64, signingString;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!created)
                        created = Math.floor(new Date().getTime() / 1000).toString();
                    if (!expires)
                        expires = (parseInt(created, 10) + 1 * 60 * 60).toString();
                    return [4 /*yield*/, _sodium.ready];
                case 1:
                    _b.sent();
                    sodium = _sodium;
                    digest = sodium.crypto_generichash(64, sodium.from_string(message));
                    digestBase64 = sodium.to_base64(digest, _sodium.base64_variants.ORIGINAL);
                    signingString = "(created): ".concat(created, "\n(expires): ").concat(expires, "\ndigest: BLAKE-512=").concat(digestBase64);
                    return [2 /*return*/, { signingString: signingString, created: created, expires: expires }];
            }
        });
    });
};
exports.createSigningString = createSigningString;
var signMessage = function (_a) {
    var signingString = _a.signingString, privateKey = _a.privateKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var sodium, signedMessage;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, _sodium.ready];
                case 1:
                    _b.sent();
                    sodium = _sodium;
                    signedMessage = sodium.crypto_sign_detached(signingString, sodium.from_base64(privateKey, _sodium.base64_variants.ORIGINAL));
                    return [2 /*return*/, sodium.to_base64(signedMessage, _sodium.base64_variants.ORIGINAL)];
            }
        });
    });
};
exports.signMessage = signMessage;
var createAuthorizationHeader = function (_a) {
    var body = _a.body, privateKey = _a.privateKey, subscriberId = _a.subscriberId, subscriberUniqueKeyId = _a.subscriberUniqueKeyId, expires = _a.expires, created = _a.created;
    return __awaiter(void 0, void 0, void 0, function () {
        var _b, signingString, expiresT, createdT, signature, header;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, (0, exports.createSigningString)({
                        message: body,
                        created: created,
                        expires: expires,
                    })];
                case 1:
                    _b = _c.sent(), signingString = _b.signingString, expiresT = _b.expires, createdT = _b.created;
                    return [4 /*yield*/, (0, exports.signMessage)({ signingString: signingString, privateKey: privateKey })];
                case 2:
                    signature = _c.sent();
                    header = "Signature keyId=\"".concat(subscriberId, "|").concat(subscriberUniqueKeyId, "|ed25519\",algorithm=\"ed25519\",created=\"").concat(createdT, "\",expires=\"").concat(expiresT, "\",headers=\"(created) (expires) digest\",signature=\"").concat(signature, "\"");
                    return [2 /*return*/, header];
            }
        });
    });
};
exports.createAuthorizationHeader = createAuthorizationHeader;
var removeQuotes = function (a) {
    return a.replace(/^["'](.+(?=["']$))["']$/, '$1');
};
var splitAuthHeader = function (authHeader) {
    var header = authHeader.replace('Signature ', '');
    var re = /\s*([^=]+)=([^,]+)[,]?/g;
    var m;
    var parts = {};
    /* tslint:disable-next-line */
    while ((m = re.exec(header)) !== null) {
        if (m) {
            parts[m[1]] = removeQuotes(m[2]);
        }
    }
    return parts;
};
var verifyMessage = function (_a) {
    var signedString = _a.signedString, signingString = _a.signingString, publicKey = _a.publicKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var sodium, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, _sodium.ready];
                case 1:
                    _b.sent();
                    sodium = _sodium;
                    return [2 /*return*/, sodium.crypto_sign_verify_detached(sodium.from_base64(signedString, _sodium.base64_variants.ORIGINAL), signingString, sodium.from_base64(publicKey, _sodium.base64_variants.ORIGINAL))];
                case 2:
                    error_1 = _b.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
};
exports.verifyMessage = verifyMessage;
var verifyHeader = function (_a) {
    var headerParts = _a.headerParts, body = _a.body, publicKey = _a.publicKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var signingString, verified;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, exports.createSigningString)({
                        message: body,
                        created: headerParts === null || headerParts === void 0 ? void 0 : headerParts.created,
                        expires: headerParts === null || headerParts === void 0 ? void 0 : headerParts.expires,
                    })];
                case 1:
                    signingString = (_b.sent()).signingString;
                    return [4 /*yield*/, (0, exports.verifyMessage)({
                            signedString: headerParts === null || headerParts === void 0 ? void 0 : headerParts.signature,
                            signingString: signingString,
                            publicKey: publicKey,
                        })];
                case 2:
                    verified = _b.sent();
                    return [2 /*return*/, verified];
            }
        });
    });
};
var isHeaderValid = function (_a) {
    var header = _a.header, body = _a.body, publicKey = _a.publicKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var headerParts, keyIdSplit, subscriberId, keyId, isValid, e_1;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    headerParts = splitAuthHeader(header);
                    keyIdSplit = (_b = headerParts === null || headerParts === void 0 ? void 0 : headerParts.keyId) === null || _b === void 0 ? void 0 : _b.split('|');
                    subscriberId = keyIdSplit[0];
                    keyId = keyIdSplit[1];
                    return [4 /*yield*/, verifyHeader({ headerParts: headerParts, body: body, publicKey: publicKey })];
                case 1:
                    isValid = _c.sent();
                    return [2 /*return*/, isValid];
                case 2:
                    e_1 = _c.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
};
exports.isHeaderValid = isHeaderValid;
var createVLookupSignature = function (_a) {
    var country = _a.country, domain = _a.domain, type = _a.type, city = _a.city, subscriber_id = _a.subscriber_id, privateKey = _a.privateKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var stringToSign, signature;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    stringToSign = "".concat(country, "|").concat(domain, "|").concat(type, "|").concat(city, "|").concat(subscriber_id);
                    return [4 /*yield*/, (0, exports.signMessage)({
                            signingString: stringToSign,
                            privateKey: privateKey,
                        })];
                case 1:
                    signature = _b.sent();
                    return [2 /*return*/, signature];
            }
        });
    });
};
exports.createVLookupSignature = createVLookupSignature;
